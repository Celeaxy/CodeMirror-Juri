@precedence {If, Identifier @left, assignmentOperator @right, arithmeticOperator @left, booleanOperator @left, Operator @left, exp @left, times @left, divides @left, plus @left, minus @left, statement @cut}

@top Program {statement*}



@tokens{
    
    LineComment {"#" ![\n\r]*}
    spaces[@export] { ($[ \t\f] | "\\" $[\n\r])+ }
    newline[@export] { $[\n\r] }
    identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }
    word { identifierChar (identifierChar | std.digit)* }
    ListIdentifier{":" word }
    Identifier {ListIdentifier | word }

    Parameter {word}
    float {std.digit+ ("." std.digit+)?}

    Number {float}
    assignmentOperator {$[=]}
    booleanOperator { $[<>] }
    arithmeticOperator {$[+\-*/]}
    Operator {(arithmeticOperator| booleanOperator | assignmentOperator)+}
    @precedence { spaces, newline, ListIdentifier, Identifier, Parameter}
    "(" ")"
    "[" "]"
}

declaration {
    FunctionDeclaration |
    OperatorDeclaration |
    ListDeclaration
}

ListDeclaration {
    ListIdentifier assignmentOperator (listLiteral | listInit)
}

listLiteral {
    "[" ((Number kw<"to"> Number) | (Number)*) "]"
}
listInit {
    kw<"init"> Number (Number | (kw<"as"> Identifier))
}


FunctionDeclaration {
    kw<"fun"> Identifier !Identifier Parameter* statement* 
}

OperatorDeclaration {
    kw<"operator"> Operator Parameter* statement*
}

functionCall {
    Identifier "(" Parameter* ")"
}

BinaryExpression {
  expression (!arithmeticOperator arithmeticOperator | !booleanOperator booleanOperator) expression
}

statement {
  (ifStatement |
  iterateStatement |
  expression |
  returnStatement |
  breakStatement |
  assignment |
  declaration) newline
}

iterateStatement{
    kw<"iterate"> expression kw<"as"> Identifier statement*
}
ifStatement {
    kw<"if"> expression ((kw<"repeat"> statement*) | kw<"then"> statement)
}

returnStatement {kw<"return"> expression}
breakStatement {kw<"break">}
expression {
    functionCall |
    BinaryExpression |
    Number |
    Identifier
}

assignment {
    Identifier assignmentOperator expression
}

@skip { spaces | LineComment }

// Keywords

kw<term> { @specialize[@name={term}]<Identifier, term> }

@detectDelim