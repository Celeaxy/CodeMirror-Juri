@precedence { exp @left, times @left, divides @left, plus @left, minus @left, statement @cut}

@top Program {expression*}



@tokens{
    LineComment {"#" ![\n\r]*}
    spaces[@export] { ($[ \t\f] | "\\" $[\n\r])+ }
    newline[@export] { $[\n] }
    identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }
    word { identifierChar (identifierChar | std.digit)* }
    Identifier { word }
    Parameter {word}
    float {std.digit+ ("." std.digit+)?}
    Number {float | std.digit+}
    Operator {"+" | "-" | "*" | "/"}
    @precedence { spaces, newline, identifier }
    @precedence { spaces, newline, word }
    "="[@name=Equals]
    "=>"[@name=Arrow]
    "(" ")" "[" "]"
}

declaration {
    FunctionDeclaration |
    VariableDeclaration |
    ListDeclaration
}
ListDeclaration {
    ListIdentifier "=" expression
}

FunctionDeclaration {
    kw<"fun"> Identifier Parameter* newline 
}


functionCall {
    Identifier "(" Parameter* ")"
}

BinaryExpression {
  expression !exp "**" expression |
  expression !times "*" expression |
  expression !divides "/" expression |
  expression !plus "+" expression |
  expression !minus "-" expression
}

statement[@isGroup=Statement] {
  IfStatement |
  expression |
  ReturnStatement |
  AssignStatement |
  declaration
}

IfStatement {
    kw<"if"> expression ((kw<"repeat"> statement*) | kw<"then"> statement)
}

ReturnStatement {kw<"return"> expression}

expression {
    functionCall |
    BinaryExpression |
    Number |
    Identifier
}

assignment {
    Identifier "=" expression
}

@skip { spaces | LineComment }

// Keywords

kw<term> { @specialize[@name={term}]<Identifier, term> }

@detectDelim